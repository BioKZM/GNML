// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: DotEnv().env['FIREBASE_WEB_KEY'].toString(),
    appId: DotEnv().env['FIREBASE_WEB_APPID'].toString(),
    messagingSenderId: DotEnv().env['FIREBASE_WEB_SENDERID'].toString(),
    projectId: DotEnv().env['FIREBASE_WEB_PROJECTID'].toString(),
    authDomain: DotEnv().env['FIREBASE_WEB_AUTHDOMAIN'].toString(),
    storageBucket: DotEnv().env['FIREBASE_WEB_STORAGEBUCKET'].toString(),
    measurementId: DotEnv().env['FIREBASE_WEB_MEASUREMENTID'].toString(),
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: DotEnv().env['FIREBASE_ANDROID_KEY'].toString(),
    appId: DotEnv().env['FIREBASE_ANDROID_APPID'].toString(),
    messagingSenderId: DotEnv().env['FIREBASE_ANDROID_SENDERID'].toString(),
    projectId: DotEnv().env['FIREBASE_ANDROID_PROJECTID'].toString(),
    storageBucket: DotEnv().env['FIREBASE_ANDROID_STORAGEBUCKET'].toString(),
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: DotEnv().env['FIREBASE_IOS_KEY'].toString(),
    appId: DotEnv().env['FIREBASE_IOS_APPID'].toString(),
    messagingSenderId: DotEnv().env['FIREBASE_IOS_SENDERID'].toString(),
    projectId: DotEnv().env['FIREBASE_IOS_PROJECTID'].toString(),
    storageBucket: DotEnv().env['FIREBASE_IOS_STORAGEBUCKET'].toString(),
    iosBundleId: DotEnv().env['FIREBASE_IOS_BUNDLEID'].toString(),
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: DotEnv().env['FIREBASE_MACOS_KEY'].toString(),
    appId: DotEnv().env['FIREBASE_MACOS_APPID'].toString(),
    messagingSenderId: DotEnv().env['FIREBASE_MACOS_SENDERID'].toString(),
    projectId: DotEnv().env['FIREBASE_MACOS_PROJECTID'].toString(),
    storageBucket: DotEnv().env['FIREBASE_MACOS_STORAGEBUCKET'].toString(),
    iosBundleId: DotEnv().env['FIREBASE_MACOS_BUNDLEID'].toString(),
  );
  static FirebaseOptions windows = FirebaseOptions(
    apiKey: DotEnv().env['FIREBASE_WINDOWS_KEY'].toString(),
    appId: DotEnv().env['FIREBASE_WINDOWS_APPID'].toString(),
    messagingSenderId: DotEnv().env['FIREBASE_WINDOWS_SENDERID'].toString(),
    projectId: DotEnv().env['FIREBASE_WINDOWS_PROJECTID'].toString(),
  );
}
